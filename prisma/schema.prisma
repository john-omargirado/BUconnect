generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String             @id @default(cuid())
  email              String             @unique
  password           String?
  name               String?
  image              String?
  role               Role               @default(STUDENT)
  college            String?
  department         String?
  year               Int?
  trustScore         Float              @default(0)
  connectTokens      Int                @default(0)
  weeklyRating       Float              @default(0)
  totalRating        Float              @default(0)
  completedServices  Int                @default(0)
  preferences        String?
  emailVerified      DateTime?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  accounts           Account[]
  sessions           Session[]
  feedbackReceived   Feedback[]         @relation("FeedbackReceiver")
  feedbackGiven      Feedback[]         @relation("FeedbackGiver")
  leaderboardEntries LeaderboardEntry[]
  matches            Match[]
  purchases          Purchase[]
  requests           Request[]
  skills             Skill[]
  tokenTransactions  TokenTransaction[]
  sentMessages       Message[]          @relation("MessageSender")
  receivedMessages   Message[]          @relation("MessageReceiver")
  conversationsInitiated Conversation[] @relation("ConversationUser1")
  conversationsReceived  Conversation[] @relation("ConversationUser2")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Skill {
  id          String   @id @default(cuid())
  title       String
  description String
  category    Category
  userId      String
  contactInfo String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cardStyle   String?
  matches     Match[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("skills")
}

model Request {
  id          String   @id @default(cuid())
  title       String
  description String
  category    Category
  userId      String
  contactInfo String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cardStyle   String?
  matches     Match[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("requests")
}

model Match {
  id            String      @id @default(cuid())
  skillId       String
  requestId     String
  userId        String
    status    MatchStatus @default(PENDING)
  tokensAwarded Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  request       Request     @relation(fields: [requestId], references: [id], onDelete: Cascade)
  skill         Skill       @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@map("matches")
}

model Feedback {
  id         String   @id @default(cuid())
  rating     Int
  comment    String?
  giverId    String
  receiverId String
  createdAt  DateTime @default(now())
  matchId    String?
  receiver   User     @relation("FeedbackReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  giver      User     @relation("FeedbackGiver", fields: [giverId], references: [id], onDelete: Cascade)

  @@map("feedback")
}

model TokenTransaction {
  id          String          @id @default(cuid())
  userId      String
  amount      Int
  type        TransactionType
  description String
  createdAt   DateTime        @default(now())
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("token_transactions")
}

model RewardItem {
  id          String     @id @default(cuid())
  name        String
  description String
  type        RewardType
  price       Int
  config      String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  purchases   Purchase[]

  @@map("reward_items")
}

model Purchase {
  id           String     @id @default(cuid())
  userId       String
  rewardItemId String
  createdAt    DateTime   @default(now())
  rewardItem   RewardItem @relation(fields: [rewardItemId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("purchases")
}

model LeaderboardEntry {
  id           String   @id @default(cuid())
  userId       String
  weekStart    DateTime
  weekEnd      DateTime
  totalRating  Float
  serviceCount Int
  position     Int
  tokensEarned Int      @default(0)
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, weekStart])
  @@map("leaderboard_entries")
}

model Message {
  id             String       @id @default(cuid())
  content        String
  senderId       String
  receiverId     String
  conversationId String
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  sender         User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver       User         @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Conversation {
  id            String    @id @default(cuid())
  user1Id       String
  user2Id       String
  lastMessageAt DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user1         User      @relation("ConversationUser1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2         User      @relation("ConversationUser2", fields: [user2Id], references: [id], onDelete: Cascade)
  messages      Message[]

  @@unique([user1Id, user2Id])
  @@map("conversations")
}

enum Role {
  STUDENT
  ADMIN
}

enum Category {
  ACADEMICS
  DESIGN
  TECH
  WRITING
  TUTORING
  CREATIVE
  RESEARCH
  SPORTS
  LANGUAGE
  MUSIC
  OTHER
}

enum MatchStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}

enum TransactionType {
  EARNED
  SPENT
  BONUS
  PENALTY
}

enum RewardType {
  PROFILE_BORDER
  CARD_THEME
  BADGE
  SPECIAL_EFFECT
  TITLE
}
